version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: carrental-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: carrental_db
      POSTGRES_USER: carrental
      POSTGRES_PASSWORD: ${DB_PASSWORD:-123456}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - carrental-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U carrental -d carrental_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: carrental-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - carrental-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # CarRental Backend API
  backend:
    build: .
    container_name: carrental-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/carrental_db
      SPRING_DATASOURCE_USERNAME: carrental
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-123456}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: false
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_EXAMPLE_CARRENTAL: DEBUG
      SERVER_PORT: 8083
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
    ports:
      - "8083:8083"
    volumes:
      - app_logs:/app/logs
    networks:
      - carrental-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend (React)
  frontend:
    build:
      context: /Users/mateoalvarez/IdeaProjects/carrental-frontend
      dockerfile: Dockerfile
    container_name: carrental-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      VITE_API_BASE_URL: http://localhost:8083/api/v1
      VITE_APP_NAME: CarRental SaaS
      VITE_APP_VERSION: 1.0.0
    ports:
      - "80:80"
    networks:
      - carrental-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: carrental-nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "443:443"
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - carrental-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: carrental-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - carrental-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: carrental-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - carrental-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  carrental-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16